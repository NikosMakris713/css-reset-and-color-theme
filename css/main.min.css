:root {
  --font-family-primary: "Montserrat", sans-serif;
  --container-laptop: 144rem;
  --container-4k: 256rem;
  --spacing-1x: clamp(1.6rem, 1.536rem + 0.18vw, 1.8rem);
  --spacing-2x: clamp(3.2rem, 1.536rem + 0.18vw, 3.6rem);
  --spacing-3x: clamp(4.8rem, 1.536rem + 0.18vw, 5.4rem);
  --spacing-4x: clamp(6.4rem, 1.536rem + 0.18vw, 7.2rem);
  --spacing-5x: clamp(8rem, 1.536rem + 0.18vw, 9rem);
  /* Set light color scheme styles */
  --color-foreground-primary-light: #1a1a1a;
  --color-foreground-secondary-light: #333333;
  --color-background-primary-light: #fff;
  --color-background-secondary-light: #f2f2f2;
  --color-link-foreground-light: #0066cc;
  --color-state-hover-foreground-light: #000;
  --color-state-info-background-light: #deeafd;
  --color-state-info-foreground-light: #174ea6;
  --color-state-good-foreground-light: #0d652d;
  --color-state-good-background-light: #e9f6ed;
  --color-state-warn-foregound-light: #c34900;
  --color-state-warn-background-light: #fff5e3;
  --color-state-bad-foreground-light: #a50e0e;
  --color-state-bad-background-light: #fce8e8;
  /* End set light color scheme styles */
  /* Set dark color scheme styles */
  --color-foreground-primary-dark: #fff;
  --color-foreground-secondary-dark: #f2f2f2;
  --color-background-primary-dark: #1a1a1a;
  --color-background-secondary-dark: #333333;
  --color-link-foreground-dark: #9da2ff;
  --color-state-hover-foreground-dark: #fff;
  --color-state-info-foreground-dark: #deeafd;
  --color-state-info-background-dark: #2c333f;
  --color-state-good-foreground-dark: #e2faed;
  --color-state-good-background-dark: #283532;
  --color-state-warn-foregound-dark: #fffcf2;
  --color-state-warn-background-dark: #3b372b;
  --color-state-bad-foreground-light: #ffe9e8;
  --color-state-bad-background-light: #3b2d30;
  /* End set dark color scheme styles */
  /* Set size for color scheme switcher button */
  --button-color-scheme-switcher-size: clamp(2rem, 1.8rem + 0.71vw, 2.8rem);
  /* End set size for color scheme switcher button */
}

/* Make animation for color scheme switcher button dark*/
/* End make animation for color scheme switcher button dark*/
.sun-and-moon > :is(.moon, .sun, .sun-beams) {
  transform-origin: center center;
}
.sun-and-moon > :is(.moon, .sun) {
  fill: var(--color-foreground-primary-dark);
}
.sun-and-moon > .sun {
  transition: transform 0.5s ease-in-out;
}
.sun-and-moon > .sun-beams {
  stroke: var(--color-foreground-primary-dark);
  stroke-width: 2px;
  transition: transform 0.5s ease-in-out, opacity 0.5s ease-in-out;
  transition-delay: 0.25s;
}
.sun-and-moon > .moon > circle {
  transition-duration: 0.25s;
}

/* Set default color scheme */
:root {
  color-scheme: light;
  --color-foreground-primary: var(--color-foreground-primary-light);
  --color-foreground-secondary: var(--color-foreground-secondary-light);
  --color-background-primary: var(--color-background-primary-light);
  --color-background-secondary: var(--color-background-secondary-light);
  --color-link-foreground: var(--color-link-foreground-light);
  --color-state-hover-foreground: var(--color-state-hover-foreground-light);
  --color-state-info-background: var(--color-state-info-background-light);
  --color-state-info-foreground: var(--color-state-info-foreground-light);
  --color-state-good-foreground: var(--color-state-good-foreground-light);
  --color-state-good-background: var(--color-state-good-background-light);
  --color-state-warn-foregound: var(--color-state-warn-foregound-light);
  --color-state-warn-background: var(----color-state-warn-background-light);
  --color-state-bad-foreground: var(--color-state-bad-foreground-light);
  --color-state-bad-background: var(--color-state-bad-background-light);
}

/* End set default color scheme */
/* Set dark color scheme when the user chooses so from OS or User Agen settings*/
@media (prefers-color-scheme: dark) {
  :root {
    color-scheme: dark;
    --color-foreground-primary: var(--color-foreground-primary-dark);
    --color-foreground-secondary: var(--color-foreground-secondary-dark);
    --color-background-primary: var(--color-background-primary-dark);
    --color-background-secondary: var(--color-background-secondary-dark);
    --color-link-foreground: var(--color-link-foreground-dark);
    --color-state-hover-foreground: var(--color-state-hover-foreground-dark);
    --color-state-info-background: var(--color-state-info-background-dark);
    --color-state-info-foreground: var(--color-state-info-foreground-dark);
    --color-state-good-foreground: var(--color-state-good-foreground-dark);
    --color-state-good-background: var(--color-state-good-background-dark);
    --color-state-warn-foregound: var(--color-state-warn-foregound-dark);
    --color-state-warn-background: var(----color-state-warn-background-dark);
    --color-state-bad-foreground: var(--color-state-bad-foreground-dark);
    --color-state-bad-background: var(--color-state-bad-background-dark);
  }
  html:not([color-scheme=light]) .sun-and-moon > .sun {
    transform: scale(1.75);
    transition-timing-function: ease-in-out;
    transition-duration: 0.25s;
  }
  html:not([color-scheme=light]) .sun-and-moon > .sun-beams {
    opacity: 0;
    transform: rotateZ(-25deg);
    transition: transform 0.5s ease-in-out;
  }
  html:not([color-scheme=light]) .sun-and-moon > .moon > circle {
    transform: translateX(-7px);
    transition-delay: 0.25s;
    transition-duration: 0.5s;
  }
  @supports (cx: 1) {
    html:not([color-scheme=light]) .sun-and-moon > .moon > circle {
      transform: translateX(0);
      cx: 17;
    }
  }
}
/* End set dark color scheme when the user chooses so from OS or User Agen settings*/
/* Set dark color scheme when user chooses so from the Web Application*/
[color-scheme=dark] {
  color-scheme: dark;
  --color-foreground-primary: var(--color-foreground-primary-dark);
  --color-foreground-secondary: var(--color-foreground-secondary-dark);
  --color-background-primary: var(--color-background-primary-dark);
  --color-background-secondary: var(--color-background-secondary-dark);
  --color-link-foreground: var(--color-link-foreground-dark);
  --color-state-hover-foreground: var(--color-state-hover-foreground-dark);
  --color-state-info-background: var(--color-state-info-background-dark);
  --color-state-info-foreground: var(--color-state-info-foreground-dark);
  --color-state-good-foreground: var(--color-state-good-foreground-dark);
  --color-state-good-background: var(--color-state-good-background-dark);
  --color-state-warn-foregound: var(--color-state-warn-foregound-dark);
  --color-state-warn-background: var(----color-state-warn-background-dark);
  --color-state-bad-foreground: var(--color-state-bad-foreground-dark);
  --color-state-bad-background: var(--color-state-bad-background-dark);
}
[color-scheme=dark] .sun-and-moon > .sun {
  transform: scale(1.75);
  transition-timing-function: ease-in-out;
  transition-duration: 0.25s;
}
[color-scheme=dark] .sun-and-moon > .sun-beams {
  opacity: 0;
  transform: rotateZ(-25deg);
  transition: transform 0.5s ease-in-out;
}
[color-scheme=dark] .sun-and-moon > .moon > circle {
  transform: translateX(-7px);
  transition-delay: 0.25s;
  transition-duration: 0.5s;
}
@supports (cx: 1) {
  [color-scheme=dark] .sun-and-moon > .moon > circle {
    transform: translateX(0);
    cx: 17;
  }
}

/* End set dark color scheme when user chooses so from the Web Application*/
/* Set light color scheme when user chooses so from the Web Application*/
[color-scheme=light] {
  color-scheme: light;
  --color-foreground-primary: var(--color-foreground-primary-light);
  --color-foreground-secondary: var(--color-foreground-secondary-light);
  --color-background-primary: var(--color-background-primary-light);
  --color-background-secondary: var(--color-background-secondary-light);
  --color-link-foreground: var(--color-link-foreground-light);
  --color-state-hover-foreground: var(--color-state-hover-foreground-light);
  --color-state-info-background: var(--color-state-info-background-light);
  --color-state-info-foreground: var(--color-state-info-foreground-light);
  --color-state-good-foreground: var(--color-state-good-foreground-light);
  --color-state-good-background: var(--color-state-good-background-light);
  --color-state-warn-foregound: var(--color-state-warn-foregound-light);
  --color-state-warn-background: var(----color-state-warn-background-light);
  --color-state-bad-foreground: var(--color-state-bad-foreground-light);
  --color-state-bad-background: var(--color-state-bad-background-light);
}

/* End set light color scheme when user chooses so from the Web Application*/
.theme-toggle {
  background: none;
  border: none;
  padding: 0;
  inline-size: var(--button-color-scheme-switcher-size);
  block-size: var(--button-color-scheme-switcher-size);
  aspect-ratio: 1;
  border-radius: 50%;
  cursor: pointer;
  touch-action: manipulation;
  -webkit-tap-highlight-color: transparent;
  outline-offset: 5px;
}
.theme-toggle > svg {
  inline-size: 100%;
  block-size: 100%;
  stroke-linecap: round;
}
.theme-toggle :is(:hover, :focus-visible) :is(.moon, .sun) {
  fill: wheat;
}
.theme-toggle :is(:hover, :focus-visible) .sun-beams {
  stroke: wheat;
}
@media (hover: none) {
  .theme-toggle {
    --size: calc(var(--button-color-scheme-switcher-size) + 0.2rem);
  }
}

/* Remove all animations, transitions and smooth scroll for people that prefer not to see them */
@media (prefers-reduced-motion: reduce) {
  html:focus-within {
    scroll-behavior: auto;
  }
  * {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}
/* End remove all animations, transitions and smooth scroll for people that prefer not to see them */
@page {
  /* FIXME: Define the right default values for page properties. */
  size: auto;
  margin: auto;
  padding: 0px;
  border-width: 0px;
}
/* Allows thead sections to print at the top of each page. */
@media print {
  thead {
    break-inside: avoid;
  }
  tfoot {
    break-inside: avoid;
  }
}
/* Set core root defaults */
html {
  font-size: 62.5%;
}
html:focus-within {
  scroll-behavior: smooth;
}

/* End set core root defaults */
/* Set default styles for all elements */
:is(*, *::before, *::after) {
  box-sizing: border-box;
  width: 100%;
  margin: 0;
  padding: 0;
}

/* End set default styles for all elements */
/* Set elements to display grid and assign them a default style */
:is(section, div, nav, aside, article, ul, ol, nav, menu) {
  display: grid;
  row-gap: var(--spacing-1x);
  justify-self: center;
}

div {
  padding: 0 var(--spacing-1x);
}

/* End set elements to display grid and assign them a default style */
/* Set styles for body and main */
:is(body, main) {
  display: grid;
}

body {
  min-height: 100vh;
  font-family: var(--font-family-primary);
  font-size: clamp(1.6rem, 1.536rem + 0.18vw, 1.8rem);
  font-weight: 500;
  color: var(--color-foreground-primary);
  background-color: var(--color-background-primary);
  text-rendering: optimizeSpeed;
  line-height: 1.5;
  grid-template-rows: auto auto 1fr auto;
  margin: 0 auto;
  overflow-x: hidden;
}

main {
  margin: var(--spacing-5x) 0;
  row-gap: var(--spacing-4x);
}

/* End set styles for body and main */
/* Set styles for text elements */
:is(section, article) {
  max-width: 75ch;
}

:is(h1, h2, h3, h4, h5, h6) {
  line-height: 1.2;
}

h1 {
  font-size: clamp(2.8rem, 2.2rem + 1.79vw, 4.8rem);
}

h2 {
  font-size: clamp(2.4rem, 2rem + 1.07vw, 3.6rem);
}

h3 {
  font-size: clamp(2rem, 1.8rem + 0.71vw, 2.8rem);
}

:is(h4, h5, h6) {
  font-size: clamp(1.8rem, 1.8rem + 0.18vw, 2rem);
}

h2:not(:first-child) {
  margin-top: var(--spacing-2x);
}

h3:not(:first-child) {
  margin-top: var(--spacing-1x);
}

:is(p, li, a, h1, h2, h3, h4, h5, h6, figcaption, caption, blockquote, dt, dd, span, abbr, b, bdi, bdo, cite, code, data, dfn, em, i, mark, rt, ruby, s, samp, small, strong, sub, sup, time, u, var, wbr, th, td) {
  overflow-wrap: break-word;
  hyphens: auto;
  text-align: start;
  font-synthesis: none;
}

a {
  color: var(--color-foreground-link-text);
  cursor: pointer;
  overflow-wrap: anywhere;
}

a:hover {
  text-decoration: underline;
}

a:not([class]) {
  text-decoration-skip-ink: auto;
}

:is(input, button, textarea, select) {
  font: inherit;
}

:is(ol, ul) {
  row-gap: var(--spacing-1x);
  padding-inline-start: 2ch;
}

:is(ul[role=list], ol[role=list]) {
  list-style: none;
}

ol:not([class]) li,
ul:not([class]) li {
  position: relative;
  line-height: 1.35;
}

li img,
p img {
  display: inline-block;
  vertical-align: sub;
}

caption {
  font-size: clamp(2rem, 1.8rem + 0.71vw, 2.8rem);
  margin: var(--spacing-1x) 0;
}

figcaption {
  padding: var(--spacing-1x);
  background-color: var(--color-foreground-secondary);
  color: var(--color-background-secondary);
}

hr {
  border-top: 1px solid var(--color-foreground-primary);
  margin: var(--spacing-3x) 0;
}

mark {
  background-color: var(--color-foreground-primary);
  color: var(--color-background-primary);
  padding: 0 0.4rem;
}

/* End set styles for text elements */
/* Make multimedia elements easier to work with */
:is(img, picture, video, iframe, audio, map, embed, object, svg, canvas, audio) {
  display: block;
  height: auto;
  max-width: 100%;
  width: 100%;
}

iframe {
  border: 0;
}

/* End make multimedia elements easier to work with */
.header-main {
  background-color: var(--color-background-primary-dark);
  color: var(--color-foreground-primary-dark);
}

.header-page-specific {
  background-color: var(--color-background-secondary-dark);
  color: var(--color-foreground-secondary-dark);
}

:is(.navigation-main, .navigation-page-specific, footer) {
  grid-template-columns: auto 1fr auto;
  max-width: var(--container-laptop);
  padding: var(--spacing-1x);
  width: 100%;
  column-gap: 3.2rem;
  align-items: center;
  margin: 0 auto;
}

.navigation-page-specific h1 {
  font-size: clamp(2rem, 1.8rem + 0.71vw, 2.8rem);
  line-height: 1;
}

body header:last-of-type {
  position: sticky;
  top: 0;
  left: 0;
  z-index: 2;
}/*# sourceMappingURL=main.min.css.map */